module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    rca rca(#SIZE(SIZE))
    sig xb[SIZE]
    
    always {
        // implement adder/subtractor unit logic here
        xb = b ^ SIZEx{alufn_signal[0]}
        rca.a = a
        rca.b = xb
        rca.cin = alufn_signal[0]
        
        out = rca.s
        // z checks if out is zero
        z = ~|rca.s
        // v checks for overflow
        v = (~a[SIZE-1] & ~xb[SIZE-1] & rca.s[SIZE-1]) | (a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1])
        // n checks if out is negative
        n = rca.s[SIZE-1]
        
    }
}