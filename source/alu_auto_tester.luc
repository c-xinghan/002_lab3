module alu_auto_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0) 
(
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output led[8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4]
) {
    
    alu alu
    //to load a different test ROM, modify this
    autotest_rom2 rom(#SIZE(32))
    
    enum States {
        ADD,
        SUB,
        MUL,
        AND,
        OR,
        XOR,
        LDR,
        SHL,
        SHR,
        SRA,
        CMPEQ,
        CMPLT,
        CMPLE
    }

    const CLK_FREQ1 = $is_sim() ? 1000 : 100000000
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16
    
    .clk(clk){
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ1}}))
        .rst(rst){
            dff states[$width(States)](#INIT(States.ADD))
            signed dff actual_output[32](#INIT(0))
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV)) 
        }
    }
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
        
    sig a[32] = rom.a
    sig b[32] = rom.b
    sig rom_out[32]
    
    always {
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
            // implement alu tester logic here
            // initialise values to avoid "not driven/partially driven" errors
        alu.a = a
        alu.b = b
        alu.alufn = 0
        led = 0
        rom_out = rom.expected
        rom.opr = 4b0000
            // use top 3 vertical LEDs to display z, v and n
        led[0] = alu.z
        led[1] = alu.v
        led[2] = alu.n
            // use 7seg to display last 12 bits of output
        decimal_renderer.value = alu.out[12:0]
        seg.values = decimal_renderer.digits
        io_segment = ~seg.seg
        io_select = ~seg.sel
            // use IO LED banks 1 and 0 to display 13th to 29th bits of output
            // IO LED bank 2 is reserved for ALUFN
        io_led = c{{8b0}, {alu.out[28:21]}, {alu.out[20:13]}}
        
        // error simulation
        if (io_dip[2][6]){
            rom_out = !rom.expected
        }

        case(states.q){
            States.ADD:
                rom.opr = 4b0000
                alu.alufn = b000000     
                actual_output.d = alu.out
                io_led[2][5:0] = b000000
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.SUB
                }        
            
            States.SUB:
                rom.opr = 4b0001
                alu.alufn = b000001 
                actual_output.d = alu.out
                io_led[2][5:0] = b000001
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.MUL
                }
            
            States.MUL:
                rom.opr = 4b0010
                alu.alufn = b000010 
                actual_output.d = alu.out
                io_led[2][5:0] = b000010
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.AND
                }
            
            States.AND:
                rom.opr = 4b0011
                alu.alufn = b011000 
                actual_output.d = alu.out
                io_led[2][5:0] = b011000
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.OR
                }
            
            States.OR:
                rom.opr = 4b0100
                alu.alufn = b011110 
                actual_output.d = alu.out
                io_led[2][5:0] = b011110
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.XOR
                }
            
            States.XOR:
                rom.opr = 4b0101
                alu.alufn = b010110 
                actual_output.d = alu.out
                io_led[2][5:0] = b010110
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.LDR
                }
            
            States.LDR:
                rom.opr = 4b0110
                alu.alufn = b011010 
                actual_output.d = alu.out
                io_led[2][5:0] = b011010
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.SHL
                }
            
            States.SHL:
                rom.opr = 4b0111
                alu.alufn = b100000
                actual_output.d = alu.out
                io_led[2][5:0] = b100000
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.SHR
                }
            
            States.SHR:
                rom.opr = 4b1000
                alu.alufn = b100001
                actual_output.d = alu.out
                io_led[2][5:0] = b100001
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.SRA
                }
            
            States.SRA:
                rom.opr = 4b1001
                alu.alufn = b100011
                actual_output.d = alu.out
                io_led[2][5:0] = b100011
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.CMPEQ
                }
            
            States.CMPEQ:
                rom.opr = 4b1010
                alu.alufn = b110011
                actual_output.d = alu.out
                io_led[2][5:0] = b110011
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.CMPLT
                }
            
            States.CMPLT:
                rom.opr = b1011
                alu.alufn = b110101
                actual_output.d = alu.out
                io_led[2][5:0] = b110101
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.CMPLE
                }
            
            States.CMPLE:
                rom.opr = 4b1100
                alu.alufn = b110111
                actual_output.d = alu.out
                io_led[2][5:0] = b110111
                led[7] = actual_output.q != rom_out
                if (io_button_edge.out[1] & io_dip[2][7]){
                    states.d = States.ADD
                }
        }
    }
}